name: Build and Release

on:
  # 在push到main分支时运行（用于测试构建）
  push:
    branches: [ main ]
    # 在创建tag时运行（用于发布）
    tags:
      - 'v*'
  # 允许手动触发
  workflow_dispatch:

# 设置环境变量
env:
  # 缓存pnpm存储路径
  PNPM_CACHE_FOLDER: .pnpm-store

jobs:
  # 代码检查和测试job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint check (if available)
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            pnpm run lint
          else
            echo "No lint script found, skipping..."
          fi
        continue-on-error: true

  # 构建job - 支持多平台
  build:
    needs: test
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-store.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Linux特定设置
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libgtk-3-dev libxss1 libasound2-dev
          printf '%s' "$CSC_LINK" | base64 --decode > windows_cert.pfx
          echo "CSC_LINK=file:///$certPath" >> $env:GITHUB_ENV

      # macOS特定设置 - 设置证书（如果有的话）
      - name: Setup macOS certificate
        if: matrix.os == 'macos-latest'
        run: |
          # 如果你有Apple开发者证书，可以在这里配置
          # 现在先跳过代码签名
          echo "SKIP_NOTARIZATION=true" >> $GITHUB_ENV
          printf '%s' "$CSC_LINK" | base64 --decode > windows_cert.pfx
          echo "CSC_LINK=file:///$certPath" >> $env:GITHUB_ENV
        env:
          # 添加这些环境变量以跳过macOS公证
          CSC_IDENTITY_AUTO_DISCOVERY: false

      # Windows特定设置
      - name: Setup Windows environment
        if: matrix.os == 'windows-latest'
        run: |
          # Windows环境变量设置
          echo "ELECTRON_CACHE=$env:USERPROFILE\.cache\electron" >> $env:GITHUB_ENV
          echo "ELECTRON_BUILDER_CACHE=$env:USERPROFILE\.cache\electron-builder" >> $env:GITHUB_ENV
          # 解码 pfx 文件
          $certPath = Join-Path $env:RUNNER_TEMP "windows_cert.pfx"
          [System.Convert]::FromBase64String($env:CSC_LINK) | Set-Content -AsByteStream $certPath
          echo "CSC_LINK=$certPath" >> $env:GITHUB_ENV
          ls $env:certPath

      # 构建应用
      - name: Build application
        run: |
          pnpm run icons
          pnpm run dist
        env:
          # GitHub token用于发布
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 跳过macOS公证（如果没有开发者账号）
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      # 上传构建产物
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: my-browser-${{ matrix.os }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.zip
          if-no-files-found: ignore

  # 发布job - 只在tag推送时运行
  release:
    permissions:
      contents: write
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          overwrite: true
          files: |
            artifacts/my-browser-windows-latest/*
            artifacts/my-browser-macos-latest/*
            artifacts/my-browser-ubuntu-latest/*
          body: |
            ## 🚀 My Browser ${{ github.ref_name }}
            
            ### 📦 安装包下载
            
            #### Windows
            - `.exe` - Windows安装程序
            
            #### macOS
            - `.dmg` - macOS磁盘映像
            
            #### Linux
            - `.AppImage` - 便携式应用程序
            - `.deb` - Debian/Ubuntu包
            - `.rpm` - Red Hat/Fedora包
            
            ### 🔄 更新内容
            
            请查看提交历史了解详细更新内容。
            
            ---
            
            **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref_name }}
      #     release_name: My Browser ${{ github.ref_name }}
      #     body: |
      #       ## 🚀 My Browser ${{ github.ref_name }}
            
      #       ### 📦 安装包下载
            
      #       #### Windows
      #       - `.exe` - Windows安装程序
            
      #       #### macOS
      #       - `.dmg` - macOS磁盘映像
            
      #       #### Linux
      #       - `.AppImage` - 便携式应用程序
      #       - `.deb` - Debian/Ubuntu包
      #       - `.rpm` - Red Hat/Fedora包
            
      #       ### 🔄 更新内容
            
      #       请查看提交历史了解详细更新内容。
            
      #       ---
            
      #       **完整更新日志**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
      #     draft: false
      #     prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

      # 上传各平台的安装包到Release
      # - name: Upload Windows artifacts
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: artifacts/my-browser-windows-latest
      #     asset_name: my-browser-windows.zip
      #     asset_content_type: application/zip
      #   continue-on-error: true

      # - name: Upload macOS artifacts
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: artifacts/my-browser-macos-latest
      #     asset_name: my-browser-macos.zip
      #     asset_content_type: application/zip
      #   continue-on-error: true

      # - name: Upload Linux artifacts
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: artifacts/my-browser-ubuntu-latest
      #     asset_name: my-browser-linux.zip
      #     asset_content_type: application/zip
      #   continue-on-error: true

  # 构建通知job
  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Success Notification
        if: needs.build.result == 'success'
        run: |
          echo "✅ Build completed successfully!"
          echo "Platform builds status:"
          echo "  - Ubuntu: ${{ needs.build.result }}"
          echo "  - Windows: ${{ needs.build.result }}"
          echo "  - macOS: ${{ needs.build.result }}"

      - name: Build Failure Notification
        if: needs.build.result == 'failure'
        run: |
          echo "❌ Build failed!"
          echo "Please check the logs for details."
          exit 1

      - name: Release Status
        if: needs.release.result != 'skipped'
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "🎉 Release created successfully!"
          else
            echo "⚠️  Release creation failed or was skipped."
          fi
